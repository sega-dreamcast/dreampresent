=
-txt,80,220:Dreampresent developed by Yuji Yokoo
-wait:
-img,40,40: /rd/main_c.png

=
-bkg: /rd/bg_dark.png
-txt,60,30:Gentle introduction to
    Dreamcast programming with mruby
-txt,60,120:Yuji Yokoo - @yujiyokoo
-txt,120,260:PRESS START!

= About me
-txt,60,30:Yuji Yokoo
  Web dev. Loves Ruby.
  Currently uses: Elixir/F#/Elm/Ruby
  Formerly: Windows desktop application
    developer (MFC/Win32)
  From: Tokyo, Japan
  Lives in: Adelaide, South Australia
-img,60,260: /rd/yuji_avatar.png

= Table of Contents
-txt,40,40: - What is mruby?
 - What is Dreamcast?
 - How do you develop a DC game/app?
 - ...and with mruby?
 - Running the app
 - Thanks and info
 - Demo

= What is mruby?
-wait:
-txt,30,30:
 - Lightweight Ruby *implementation*
 - Ruby 1.9 syntax, with mostly ISO standard
 - For embedding
 - Easy to compile and link into C

-txt,30,210:
 "mruby is the lightweight implementation of the
  Ruby language complying with part of the ISO
  standard. mruby can be linked and embedded
  within your application."

= The advantage of using mruby
-wait:
-txt,40,40:- Main logic in Ruby! Fun!
-wait:
-txt,40,70:- (Personally) more productive
-wait:
-txt,40,100:- Easy integration with C
  Use C where necessary, particularly to
  get down to lower-level operations.

= What is Dreamcast?
-wait:
-txt,60,30: - Sega's current video game console
-wait:
-hline,176,42,86,3:red
-wait:
-txt,60,90: - Released in 1998
   - Hitachi SH4 at 200MHz
   - 16MB of RAM
   - NEC PowerVR2 at 100MHz
   - 8MB Video RAM
   - GD-ROM
   - Serial Port
   - Modem (33.6K~56K)

= Why Dreamcast?
-txt,60,30:
 - 2018 was the 20th anniversary year
 - Dreamcast is still loved by many!
 - Dreamcast runs custom code with no mods*
 - Dreamcast has strong indie/homebrew culture
 - Dreamcast has great software tools

-txt,30,330: *assuming you have consoles produced
  in 1998, 1999, or early 2000

= What are some disadvantages of Dreamcast today?
-txt,60,30:
  - No more units produced
  - Peripherals are hard/expensive to get
  - No app store or Internet-based
    distribution channel

= KallistiOS

-txt,40,80:KallistiOS, aka KOS ("chaos").
Technically cross platform.

Wikipedia:
"KallistiOS is a free, BSD license-based
 development system for the Sega Dreamcast
 game console."

-txt,40,280:
It comes with cross compilers, linkers, libraries
etc.

= Dreamcast homebrew development steps
-txt,30,40,white,yes:[ C code ]
-wait:
-txt,70,70,yellow:|
-txt,70,100,yellow:|
-txt,90,85,white:<------- Cross compile
-wait:
-txt,30,130,white,yes:[ SH4 object file]
-wait:
-txt,70,170,yellow:|
-txt,70,200,yellow:|
-txt,90,185,white:<---- Link ----
-txt,300,185,white,yes:[ KOS DC library (SH4) ]
-wait:
-txt,30,230,white,yes:[ Executable (.elf) ]
-wait:
-txt,270,230,white: *runnable on Dreamcast
-wait:
-txt,70,260,yellow:|
-txt,70,290,yellow:|
-txt,90,275,white:<---- objcopy, scramble, make image
-wait:
-txt,30,320,white,yes:[ Disc image (.cdi) ]

= Dreamcast homebrew development steps with mruby
-txt,30,40,white,yes:[ c code ]
-txt,430,40,white,yes:[ mruby code ]
-wait:
-txt,350,85,white:compile w/ mrbc (host)
-txt,402,64,white:^
-txt,402,64,white:|
-txt,376,40,yellow:<---
-wait:
-txt,180,40,white,yes:[ bytecode(.c) ]
-wait:
-txt,154,40,yellow:--
-txt,160,62,yellow:|
-txt,160,70,yellow:|
-txt,160,100,yellow:|
-wait:
-txt,172,85,white:<-
-txt,200,72,white:Cross
-txt,200,96,white:compile
-wait:
-txt,30,130,white,yes:[ SH4 object file]
-wait:
-txt,160,160,yellow:|
-txt,160,190,yellow:|
-txt,178,175,white:<- link -
-txt,320,160,white,yes:[ KOS DC library (sh4) ]
-wait:
-txt,320,190,white,yes:[ mruby library (sh4) ]
-wait:
-txt,30,220,white,yes:[ Executable (.elf) ]
-wait:
-txt,270,220,white: *runnable on Dreamcast
-wait:
-txt,160,250,yellow:|
-txt,160,280,yellow:|
-txt,178,265,white:<--- objcopy, scramble, make image
-wait:
-txt,30,310,white,yes:[ Disc image (.cdi) ]
-wait:
-hline,156,34,264,4:red
-vline,156,34,40,4:red
-vline,416,34,40,4:red

-hline,20,74,136,4:red
-hline,416,74,204,4:red

-vline,20,76,188,4:red
-vline,620,76,188,4:red
-hline,20,260,604,4:red

= Main entry point
-img,40,40: /rd/main_c.png
-wait:
-txt,420,160,white,yes:<- Dreamcast video
-wait:
-txt,340,220,white,yes:<- init mruby
-wait:
-txt,420,330,white,yes:<- run mruby code

= mruby bytecode
-img,40,40: /rd/mrb_compiled.png

= Calling KOS functions
-img,40,30: /rd/dckos_c.png
-txt,320,414,white,yes:^mruby-callable functions

= Calling KOS functions
-txt,40,40:From Ruby:
-img,40,120: /rd/start_on.png

= start.rb + Dreampresent
-img,40,40: /rd/start_rb.png
-wait:
-txt,460,70,white,yes:<- kick off
-txt,240,130,white,yes:<- errors/clean up
-wait:
-txt,360,280,white,yes:create presentation
-txt,440,310,white,yes:<- and start

= Running the Dreamcast program
-txt,40,40:Once built, how do you run it?
Emulator is great, but not real
-wait:
-txt,40,170: 1. Use CD-Rs
-txt,40,200: 2. Use SDs with SD loader software
-txt,40,230: 3. Use Broadband Adapters (BBAs) with ip loader
-txt,40,260: 4. Use serial cable (DC coder's cable)
  with serial loader

= Getting the program onto Dreamcast
-txt,40,40:
There are problems with all of them.

CD-Rs are expensive and time consuming.

SDs are cheaper but still tedious.

BBAs are expensive.

Serial cables need to be built.

=
-txt,80,200:Now you have all the knowledge needed!
-wait:
-txt,80,230:(except a lot of details)

= Thanks to
-txt,40,40:I cannot thank everyone here, but in particular:
 - mruby developers
 - KallistiOS developers
 - Developers of Dreamcast-related tools
 - Dreamcast Indie and Homebrew communities
   (Simulant in particular)
 - Adam Davies, Olly Putland and Paul Fioravanti
 - RORO Sydney
 - everyone here

= More information
-txt,10,40:Dreampresent:
https://gitlab.com/yujiyokoo/dreampresent
-txt,10,120:Example game:
https://gitlab.com/yujiyokoo/mrbtris-dreamcast
-txt,10,200:Development environment:
https://gitlab.com/yujiyokoo/docker-mruby-kos-dc
-txt,10,280:Serial cable construction info:
https://gitlab.com/yujiyokoo/dreamcast-serial-cable

-txt,80,360:Questions? Talk to @yujiyokoo on Twitter
