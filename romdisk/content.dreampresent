=
-bkg: /rd/bg_dark.png
-txt,60,30:Developing your Dreamcast games with mruby
-txt,60,120:Yuji Yokoo - @yujiyokoo
-txt,120,260:PRESS START!

-wait:
-txt,432,52,red:^
-txt,280,64,red:and presentation tools!

= Resetting timer internally...
-resettimer

= About me
-txt,60,30:Yuji Yokoo
  Web dev. Loves Ruby.
  Currently uses: Elixir/F#/Elm/Ruby
  Formerly: Windows desktop application
    developer (MFC/Win32)
  From: Tokyo, Japan
  Lives in: Adelaide, South Australia
-img,60,260: /rd/yuji_avatar.png

= Adelaide, Australia
-wait:
-img512,94,30,452,420: /rd/AdelaideMelbourne_orig655x608.png
-wait:
-img512,108,30,424,420: /rd/AdelaideTaipei_orig659x652.png

= Table of Contents
-txt,40,40: - About this app
 - What is Dreamcast?
 - What is mruby?
 - What is KallistiOS
 - Homebrew Development Steps
 - Presentation app code overview
 - Running the code
 - Getting the program to the unit
 - Future directions / TODOs
 - Thanks and info
 - Demo

= This application
-txt,60,60:Dreampresent
-wait:
-txt,60,90: - Presentation app
-wait:
-txt,60,120: - Runs on DC
-wait:
-txt,60,150: - It's a live demo
-wait:
-txt,60,180: - Features
   - Syntax highlighting <- New!
   - PNG images
   - Time / page progress
   - Lines (horizontal & vertical)
   - Go back / forward
   - Not so much safety checking!

= Example Slide
-bkg: /rd/bg_dark.png
-txt,60,30,white,yes:Example text with
black background.
-txt,60,100,yellow: Here's yellow text
-hline,60,150,300,5:red
-img,400,30: /rd/Dreamcast.png
-txtblock,60,180,510,400
-code,60,180,ruby:class HelloWorld
  def run
    puts "Hello, world!"
  end
end

HelloWorld.new.run

= Example source
-txtblock,30,30,580,400
-txt,30,30,white: = Example Slide
 -bkg: /rd/bg_dark.png
 -txt,60,30,white,yes:Example text with
 black background.
 -txt,60,100,yellow: Here's yellow text
 -hline,60,150,300,5:red
 -img,400,30: /rd/Dreamcast.png
 -txtblock,60,180,510,400
 -code,60,180,ruby:class HelloWorld
   def run
     puts "Hello, world!"
   end
 end

= What is Dreamcast?
-wait:
-txt,60,30: - Sega's current video game console
-wait:
-hline,176,42,86,3:red
-txt,176,60:latest
-wait:
-hline,176,72,74,3:red
-wait:
-img512,60,38,480,407: /rd/megadrivemini_orig568x482.png

= What is Dreamcast?
-txt,60,30: - Sega's current video game console
-hline,176,42,86,3:red
-txt,176,60:latest
-hline,176,72,74,3:red
-wait:
-txt,60,90: - Released in 1998
   - Hitachi SH4 at 200MHz
   - 16MB of RAM
   - NEC PowerVR2 at 100MHz
   - 8MB Video RAM
   - GD-ROM
   - Serial Port
   - Modem (33.6K~56K)

= Why Dreamcast?
-wait:
-txt,30,60: - 2018 was the 20th anniversary year
 - I had my 2nd Dreamcast unit working from 2002
-wait:
-txt,30,180: - Dreamcast is still loved by many! It's awesome.
-wait:
-txt,30,210: - Dreamcast runs custom code with no mods*
-txt,30,360: *assuming you have consoles produced
  in 1998, 1999, or early 2000
-wait:
-txt,30,240: - Dreamcast has strong indie/homebrew culture
-wait:
-txt,30,270: - Dreamcast has good OSS for homebrew

= What are some disadvantages of Dreamcast today?
-wait:
-txt,30,30:
  - No more units produced & they are all old
-wait:
-txt,30,60:
  - Peripherals are hard/expensive to get
-wait:
-txt,30,90:
  - No app store or Internet-based
    distribution channel

= How does Dreamcast compare with current consoles?
-img,40,60: /rd/Dreamcast.png
-txt,40,210:
Dreamcast
Hitachi SH4 at 200MHz
NEC PowerVR2
16MB RAM + 8MB Video RAM
GD-ROM drive

-img,360,60: /rd/PS4.png
-txt,360,210:
PlayStation4
AMD Jaguar at 1.6GHz
AMD Radeon GCN
8GB RAM
Blu-ray drive

= What is mruby?
-wait:
-txt,60,30: - Lightweight Ruby *implementation*
-wait:
-txt,60,60: - Ruby 1.9 syntax, focusing on ISO standard
-wait:
-txt,60,90: - Intended for embedding
-wait:
-txt,60,120: - Easy to compile and link into C
-wait:
-txt,60,150: - Not necessarily faster or slower
-wait:
-txt,60,180: - First released in 2012
-wait:
-txt,60,210: - Many things are optional

-txt,30,240:
 "mruby is the lightweight implementation of the
  Ruby language complying with part of the ISO
  standard. mruby can be linked and embedded
  within your application."

= The advantages of using mruby
-wait:
-txt,40,40:- Main logic in Ruby! Fun!
-wait:
-txt,40,70:- (Personally) more productive
-wait:
-txt,40,100:- Easy integration with C
  Use C where necessary, particularly to
  get down to lower-level operations.

= KallistiOS

-txt,40,80:KallistiOS, aka KOS ("chaos").
Technically cross platform.

Wikipedia says:
"KallistiOS is a free, BSD license-based
 development system for the Sega Dreamcast
 game console."

-txt,40,280:
It comes with cross compilers, linkers, libraries
etc.


= Dreamcast homebrew development steps overview
-txt,30,40,white,yes:[ C code ]
-wait:
-txt,70,70,yellow:|
-txt,70,100,yellow:|
-txt,90,85,white:<------- Cross compile
-wait:
-txt,30,130,white,yes:[ SH4 object file]
-wait:
-txt,70,170,yellow:|
-txt,70,200,yellow:|
-txt,90,185,white:<---- Link ----
-txt,300,185,white,yes:[ KOS DC library (SH4) ]
-wait:
-txt,30,230,white,yes:[ Executable (.elf) ]
-wait:
-txt,270,230,white: *runnable on Dreamcast
-wait:
-txt,70,260,yellow:|
-txt,70,290,yellow:|
-txt,90,275,white:<---- objcopy, scramble, make image
-wait:
-txt,30,320,white,yes:[ Disc image (.cdi) ]

= Dreamcast Homebrew Development Steps with mruby
-txt,30,40,white,yes:[ c code ]
-txt,430,40,white,yes:[ mruby code ]
-wait:
-txt,350,85,white:compile w/ mrbc (host)
-txt,402,64,white:^
-txt,402,64,white:|
-txt,376,40,yellow:<---
-wait:
-txt,180,40,white,yes:[ bytecode(.c) ]
-wait:
-txt,154,40,yellow:--
-txt,160,62,yellow:|
-txt,160,70,yellow:|
-txt,160,100,yellow:|
-wait:
-txt,172,85,white:<-
-txt,200,72,white:Cross
-txt,200,96,white:compile
-wait:
-txt,30,130,white,yes:[ SH4 object file]
-wait:
-txt,160,160,yellow:|
-txt,160,190,yellow:|
-txt,178,175,white:<- link -
-txt,320,160,white,yes:[ KOS DC library (sh4) ]
-wait:
-txt,320,190,white,yes:[ mruby library (sh4) ]
-wait:
-txt,30,220,white,yes:[ Executable (.elf) ]
-wait:
-txt,270,220,white: *runnable on Dreamcast
-wait:
-txt,160,250,yellow:|
-txt,160,280,yellow:|
-txt,178,265,white:<--- objcopy, scramble, make image
-wait:
-txt,30,310,white,yes:[ Disc image (.cdi) ]
-wait:
-hline,156,34,264,4:red
-vline,156,34,40,4:red
-vline,416,34,40,4:red

-hline,20,74,136,4:red
-hline,416,74,204,4:red

-vline,20,76,188,4:red
-vline,620,76,188,4:red
-hline,20,260,604,4:red

= Main entry point
-txtblock,30,30,600,410
-code,40,40,c:extern const uint8_t bytecode[];
int main(int argc, char **argv) {
  vid_set_mode(DM_640x480_VGA, PM_RGB565);

  mrb_state *mrb = mrb_open();
  struct RClass *dc_kos =
    mrb_define_module(mrb, "DcKos");
  define_module_functions(mrb, dc_kos);
  mrb_load_irep(mrb, bytecode);
  mrb_close(mrb);
  return 0;
}
-wait:
-txt,420,40,yellow,yes:<- mruby bytecode
-wait:
-txt,360,130,yellow,yes:^ Dreamcast video
-txt,360,130,yellow:|
-wait:
-txt,420,160,yellow,yes:<- init mruby
-wait:
-txt,442,190,yellow,yes:<- build
-txt,478,220,yellow,yes:module and
functions
-wait:
-txt,420,280,yellow,yes:<- run mruby code
-wait:
-txt,260,310,yellow,yes:<- finish

= mruby bytecode
-txtblock,20,50,610,400
-code,30,60,c: #include <stdint.h>
 #ifdef __cplusplus
 extern const uint8_t bytecode[];
 #endif
 const uint8_t
 #if defined __GNUC__
 __attribute__((aligned(4)))
 #elif defined _MSC_VER
 __declspec(align(4))
 #endif
 bytecode[] = {

= mruby bytecode
-txtblock,20,50,610,400
-code,30,60,c: #endif
 bytecode[] = {
 0x45,0x54,0x49,0x52,0x30,0x30,0x30,0x36,0x34,
 0x35,0x00,0x00,0x89,0xe0,0x4d,0x41,0x54,0x5a,
 0x30,0x30,0x30,0x30,0x49,0x52,0x45,0x50,0x00,
 0x00,0x3f,0x9b,0x30,0x30,0x30,0x32,0x00,0x00,
 0x06,0x18,0x00,0x02,0x00,0x06,0x00,0x13,0x00,
 0x00,0x01,0x1f,0x0f,0x02,0x5b,0x02,0x00,0x5c,
 0x02,0x00,0x0f,0x02,0x0f,0x03,0x5a,0x02,0x01,
 0x5c,0x02,0x01,0x0f,0x02,0x0f,0x03,0x5a,0x02,

= Integration with C
-txt,30,30:Example: Reading controller buttons
-img,40,80: /rd/dc_controller.png
-wait:
-txt,410,210,yellow,yes:[B Button]
-txt,380,240,yellow,yes:[A Button]
-txt,50,310,yellow,yes:[Left]
-txt,190,310,yellow,yes:[Right]
-txt,120,260,yellow,yes:[Up]
-txt,120,360,yellow,yes:[Down]
-txt,300,340,yellow,yes:[START]

= Bitshift and Bitwise AND
-txt,30,60:Bitshift shifts bits in a binary number
-wait:
-txt,30,90:"<<" shifts to left, ">>" shifts to right
-wait:
-txt,30,120:0001 << 1 = 0010
-wait:
-txt,30,150:1101 << 1 = 1010
-wait:
-txt,30,180:0101 >> 2 = 0001
-wait:
-txt,30,240:AND takes 2 bits and returns 1 if both are 1
-wait:
-txt,30,270:1 & 1 = 1
-wait:
-txt,30,300:0 & 1 = 0
-wait:
-txt,30,330:1 & 0 = 0
-wait:
-txt,30,360:0 & 0 = 0

= Bitshift and Bitwise AND
-txt,30,60:Bitwise AND can handle many digits together
-wait:
-txt,30,90:0101 & 0110 = 0100
-wait:
-txt,30,120:1111 & 0110 = 0110
-wait:
-txt,30,210:It can check a specific digit is on
-wait:
-txt,30,240:0110 & 0001 = 0000
-wait:
-txt,30,270:1111 & 0001 = 0001
-wait:
-txt,30,300:1001 & 0001 = 0001

= Integration with C
-txt,30,30:Example: Reading controller buttons
-txt,30,60:KOS button state in 16 bit flags
-txtblock,40,90,610,370
-code,50,100,c: #define CONT_C          (1<<0)
 #define CONT_B          (1<<1)
 #define CONT_A          (1<<2)
 #define CONT_START      (1<<3)
 #define CONT_DPAD_UP        (1<<4)
 #define CONT_DPAD_DOWN      (1<<5)
 #define CONT_DPAD_LEFT      (1<<6)
 #define CONT_DPAD_RIGHT     (1<<7)

= Integration with C
-txt,30,30:Example: Reading controller buttons
-txt,80,200,white,yes:0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
-txt,80,230,white,yes:                ^ ^ ^ ^ ^ ^ ^ ^
                R L D U S A B C
-wait:
-txt,80,200,white,yes:0 0 0 0 0 0 0 0 0 0 1 0 1 1 1 0
-txt,80,230,white,yes:                        ^      
                        S      
-wait:
-txt,80,230,white,yes:                        ^      
0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0
-wait:
-txt,80,230,white,yes:               &               
-wait:
-txt,80,290,yellow,yes:0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0
-wait:
-txtblock,70,330,580,380
-code,80,340,c: #define CONT_START      (1<<3)

= Integration with C
-txt,30,30:Example: Reading controller buttons
-txt,30,60:KOS button state in 16 bit flags
-txtblock,20,90,610,400
-code,30,100,c:mrb_value start(mrb_state *mrb, mrb_value self)
{
  struct mrb_value state;
  mrb_get_args(mrb, "i", &state);

  return mrb_bool_value(
    mrb_fixnum(state) & CONT_START
  );
};
-wait:
-txt,170,220,yellow,yes:^ unwrap mruby value param
-txt,170,220,yellow:|
-wait:
-hline,74,306,360,2:yellow
-txt,240,310,yellow,yes:Checking Start Button
-wait:
-txt,320,250,yellow,yes:<- wrap in mruby value

= Integration with C
-txt,30,30:Example: Reading controller buttons
-txt,30,60:KOS button state in 16 bit flags
-txtblock,20,90,610,400
-code,30,100,c:void define_module_functions(mrb_state *mrb,
        struct RClass *module)
{
  mrb_define_module_function(mrb, module,
      "btn_start?", start, MRB_ARGS_REQ(1));
}
-wait:
-txt,70,254,yellow,yes:     ^ attach "start" function to
the given module, and call it "btn_start?"
-txt,70,254,yellow:     |

= Integration with C
-txt,40,40:From Ruby:
-txtblock,40,120,600,240
-code,50,130,ruby:def is_start_on?
  DcKos::btn_start?(DcKos::get_button_state)
end

= Dreampresent start.rb
-txtblock,40,40,600,400
-code,50,50,ruby:begin
  puts "Starting presentation."
  Dreampresent.new(DcKosRb.new(DcKos)).start
rescue => ex
  # NOTE: backtrace requires 'mrbc -g'
  p ex.backtrace
  p ex.inspect
  raise ex
end
-wait:
-txt,460,140,yellow,yes:^ kick off
-txt,460,140,yellow:|
-txt,270,220,yellow,yes:<- errors/clean up

= Dreampresent application class
-txtblock,40,40,600,400
-code,50,50,ruby:class Dreampresent
  def initialize(dc_kos)
    @dc_kos = dc_kos
  end

  def start
    puts "Dreampresent: start"
    Presentation.new(@dc_kos,
      PageData.new(@dc_kos, Time.now).all
    ).run
  end
end
-wait:
-txt,440,190,yellow,yes:create
-txt,440,220,yellow,yes:presentation
-txt,440,250,yellow,yes:<- and start

= Dreampresent Presentation class
-txtblock,40,40,600,400
-code,50,50,ruby:class Presentation
  def run
    idx = 0
    while(idx < @pages.length)
      input = @pages[idx].show(@dc_kos, idx)
      case
      when input == NEXT_PAGE
        idx += 1
      when input == QUIT
        idx += @pages.length # Past last page
      end
    end
-wait:
-txt,410,140,yellow,yes:<- main loop
-wait:
-txt,220,200,yellow,yes:^ render and wait for input
-txt,220,200,yellow:|
-wait:
-txt,380,260,yellow,yes:<- respond
   to input

= Game example main loop
-txtblock,40,40,600,410
-code,50,50,ruby:def main_loop
  @dc2d::clear_score(@score)
  while true
    @screen.draw_board(FULL_SOLID_BOARD)

    wait_for_start_button
    running = true

    @game_state.reset
    @screen.draw_board(@game_state)

    while running do

-wait:
-txt,390,80,yellow,yes:<- outer loop
-wait:
-txt,370,200,yellow,yes:<- PRESS START!
-wait:
-txt,440,290,yellow,no:draw initial
   <- board
-wait:
-txt,320,350,yellow,yes:      inner loop for
<- single game round

= Where to run/test
-txt,40,60:Actual Dreamcast unit is the best.
However, emulators are handy too.
-wait:
-txt,40,120:Emulators
 - Convenient. No need for the real unit.
 - Has Standard Out (STDOUT)
 - But, it's not the same.

= Console (emulator/ip/serial)
-txt,40,30: with emulators, console output is available
-img,40,70: /rd/emulator_console.png

= Getting the program onto Dreamcast
-txt,40,40:So, how would you put it on the unit?
-wait:
-txt,40,100:"Is there a USB Port?"
-wait:
-txt,40,160:"There's a serial port at the back.
It was 1998."

= Getting the program onto Dreamcast
-txt,40,40:There are multiple common methods
of getting your binaries onto Dreamcast.
-wait:
-txt,40,100: 1. Use CD-Rs
-txt,40,130: 2. Use SDs with SD loader software
-txt,40,160: 3. Use Broadband Adapters (BBAs) with ip loader
-txt,40,190: 4. Use serial cable (DC coder's cable)
  with serial loader

= Getting the program onto Dreamcast
-txt,40,40:
There are problems with all of them.

CD-Rs are expensive and time consuming.

SDs are cheaper but still tedious.

BBAs are expensive.

Serial cables need to be built.

= Getting the program onto Dreamcast
-img,40,40: /rd/bba_ebay.png

= Building the serial cable
-txt,40,70:The serial cable could be built
from components.

The DC serial connectors are available from
Neo-Geo Pocket to DC cables.

Available from net auctions?
-wait:
-img,40,0: /rd/dc_ngpocket_ebay.png

= Building the serial cable
-txt,40,40:Alternatively, the SD card reader has a connector

-wait:
-img,0,0: /rd/DCSerialConnector.png

-wait:
-img,110,60: /rd/soldered_connector.png

= Finished cable
-img,30,30: /rd/DCToSerial.png

=
-txt,80,200:After many days, it all worked!

=
-txt,80,200:Now you have all the knowledge needed!
-wait:
-txt,80,230:(except a lot of details)

= Future directions / TODO
-txt,40,40: - more convenient setup
   ...than Vagrant VBox needing 10GB
   ...and having to build it yourself
 - more documentation - eg. tutorials
 - separate library/mrbgem
 - get someone else to try it
 - more features (sound, PowerVR, VMU)
 - build more demanding games
-wait:
-hline,76,54,400,2:red
-hline,76,84,400,2:red
-hline,76,114,400,2:red

= Thanks
-txt,40,40:I cannot thank everyone here, but in particular:
 - mruby developers
 - KallistiOS developers
 - Dreamcast Indie and Homebrew communities
   (Simulant in particular)
 - Rubyconf Australia
 - Adam Davies, Olly Putland and Paul Fioravanti
 - everyone here

* Dreamcast console and controller photos provided
  by Evan-Amos under CC BY-SA 3.0.
  Cropped and resized by Yuji Yokoo.

= More information
-txt,10,40:Dreampresent:
https://gitlab.com/yujiyokoo/dreampresent
-txt,10,120:Example game:
https://gitlab.com/yujiyokoo/mrbtris-dreamcast
-txt,10,200:Development environment:
https://gitlab.com/yujiyokoo/docker-mruby-kos-dc
-txt,10,280:Serial cable construction info:
https://gitlab.com/yujiyokoo/dreamcast-serial-cable

-txt,80,360:Ask me anything: @yujiyokoo on Twitter

